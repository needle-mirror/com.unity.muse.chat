/*
 * Muse API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.6
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Unity.Muse.Chat.Client.OpenAPIDateConverter;

namespace Unity.Muse.Chat.Model
{
    /// <summary>
    /// AssistantModelsMessagesChatRequest
    /// </summary>
    [DataContract(Name = "assistant__models__messages__ChatRequest")]
    internal partial class AssistantModelsMessagesChatRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantModelsMessagesChatRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssistantModelsMessagesChatRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantModelsMessagesChatRequest" /> class.
        /// </summary>
        /// <param name="history">history (required)</param>
        /// <param name="message">message (required)</param>
        /// <param name="streamResponse">streamResponse</param>
        /// <param name="unityVersions">unityVersions</param>
        /// <param name="highQuality">highQuality</param>
        /// <param name="referenceSources">referenceSources</param>
        /// <param name="planningParams">planningParams</param>
        /// <param name="mediationParams">mediationParams</param>
        /// <param name="seed">seed</param>
        public AssistantModelsMessagesChatRequest(List<SafeChatMessage> history = default(List<SafeChatMessage>), string message = default(string), bool streamResponse = false, List<string> unityVersions = default(List<string>), bool highQuality = default(bool), bool referenceSources = default(bool), AssistantModelsMessagesModelParameters planningParams = default(AssistantModelsMessagesModelParameters), AssistantModelsMessagesModelParameters mediationParams = default(AssistantModelsMessagesModelParameters), int seed = default(int))
        {
            // to ensure "history" is required (not null)
            if (history == null)
            {
                throw new ArgumentNullException("history is a required property for AssistantModelsMessagesChatRequest and cannot be null");
            }
            this.History = history;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for AssistantModelsMessagesChatRequest and cannot be null");
            }
            this.Message = message;
            this.StreamResponse = streamResponse;
            this.UnityVersions = unityVersions;
            this.HighQuality = highQuality;
            this.ReferenceSources = referenceSources;
            this.PlanningParams = planningParams;
            this.MediationParams = mediationParams;
            this.Seed = seed;
        }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name = "history", IsRequired = true, EmitDefaultValue = true)]
        public List<SafeChatMessage> History { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets StreamResponse
        /// </summary>
        [DataMember(Name = "stream_response", EmitDefaultValue = true)]
        public bool StreamResponse { get; set; }

        /// <summary>
        /// Gets or Sets UnityVersions
        /// </summary>
        [DataMember(Name = "unity_versions", EmitDefaultValue = false)]
        public List<string> UnityVersions { get; set; }

        /// <summary>
        /// Gets or Sets HighQuality
        /// </summary>
        [DataMember(Name = "high_quality", EmitDefaultValue = true)]
        public bool HighQuality { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceSources
        /// </summary>
        [DataMember(Name = "reference_sources", EmitDefaultValue = true)]
        public bool ReferenceSources { get; set; }

        /// <summary>
        /// Gets or Sets PlanningParams
        /// </summary>
        [DataMember(Name = "planning_params", EmitDefaultValue = false)]
        public AssistantModelsMessagesModelParameters PlanningParams { get; set; }

        /// <summary>
        /// Gets or Sets MediationParams
        /// </summary>
        [DataMember(Name = "mediation_params", EmitDefaultValue = false)]
        public AssistantModelsMessagesModelParameters MediationParams { get; set; }

        /// <summary>
        /// Gets or Sets Seed
        /// </summary>
        [DataMember(Name = "seed", EmitDefaultValue = false)]
        public int Seed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssistantModelsMessagesChatRequest {\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  StreamResponse: ").Append(StreamResponse).Append("\n");
            sb.Append("  UnityVersions: ").Append(UnityVersions).Append("\n");
            sb.Append("  HighQuality: ").Append(HighQuality).Append("\n");
            sb.Append("  ReferenceSources: ").Append(ReferenceSources).Append("\n");
            sb.Append("  PlanningParams: ").Append(PlanningParams).Append("\n");
            sb.Append("  MediationParams: ").Append(MediationParams).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
