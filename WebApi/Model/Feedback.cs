/*
 * Muse API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.6
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Unity.Muse.Chat.Client.OpenAPIDateConverter;

namespace Unity.Muse.Chat.Model
{
    /// <summary>
    /// Feedback
    /// </summary>
    [DataContract(Name = "Feedback")]
    internal partial class Feedback
    {

        /// <summary>
        /// Gets or Sets Sentiment
        /// </summary>
        [DataMember(Name = "sentiment", IsRequired = true, EmitDefaultValue = true)]
        public AssistantModelsFeedbackSentiment Sentiment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedback" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Feedback() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedback" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="museVersion">museVersion</param>
        /// <param name="message">message (required)</param>
        /// <param name="response">response (required)</param>
        /// <param name="sentiment">sentiment (required)</param>
        /// <param name="unityVersion">unityVersion</param>
        /// <param name="requestId">requestId</param>
        /// <param name="history">history</param>
        /// <param name="details">details</param>
        /// <param name="heapSessionUrl">heapSessionUrl</param>
        /// <param name="email">email</param>
        /// <param name="isUnityEmployee">isUnityEmployee</param>
        /// <param name="creationDateUtc">creationDateUtc</param>
        /// <param name="userId">userId</param>
        /// <param name="conversationId">conversationId</param>
        public Feedback(string id = default(string), string museVersion = @"&quot;0.7.3&quot;", string message = default(string), string response = default(string), AssistantModelsFeedbackSentiment sentiment = default(AssistantModelsFeedbackSentiment), string unityVersion = default(string), string requestId = default(string), List<ChatMessage> history = default(List<ChatMessage>), string details = default(string), string heapSessionUrl = default(string), string email = default(string), bool isUnityEmployee = default(bool), DateTime creationDateUtc = default(DateTime), string userId = default(string), string conversationId = default(string))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for Feedback and cannot be null");
            }
            this.Message = message;
            // to ensure "response" is required (not null)
            if (response == null)
            {
                throw new ArgumentNullException("response is a required property for Feedback and cannot be null");
            }
            this.Response = response;
            this.Sentiment = sentiment;
            this.Id = id;
            // use default value if no "museVersion" provided
            this.MuseVersion = museVersion ?? @"&quot;0.7.3&quot;";
            this.UnityVersion = unityVersion;
            this.RequestId = requestId;
            this.History = history;
            this.Details = details;
            this.HeapSessionUrl = heapSessionUrl;
            this.Email = email;
            this.IsUnityEmployee = isUnityEmployee;
            this.CreationDateUtc = creationDateUtc;
            this.UserId = userId;
            this.ConversationId = conversationId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "_id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MuseVersion
        /// </summary>
        [DataMember(Name = "muse_version", EmitDefaultValue = false)]
        public string MuseVersion { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "response", IsRequired = true, EmitDefaultValue = true)]
        public string Response { get; set; }

        /// <summary>
        /// Gets or Sets UnityVersion
        /// </summary>
        [DataMember(Name = "unity_version", EmitDefaultValue = false)]
        public string UnityVersion { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name = "request_id", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name = "history", EmitDefaultValue = false)]
        public List<ChatMessage> History { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets HeapSessionUrl
        /// </summary>
        [DataMember(Name = "heap_session_url", EmitDefaultValue = false)]
        public string HeapSessionUrl { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets IsUnityEmployee
        /// </summary>
        [DataMember(Name = "is_unity_employee", EmitDefaultValue = true)]
        public bool IsUnityEmployee { get; set; }

        /// <summary>
        /// Gets or Sets CreationDateUtc
        /// </summary>
        [DataMember(Name = "creation_date_utc", EmitDefaultValue = false)]
        public DateTime CreationDateUtc { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets ConversationId
        /// </summary>
        [DataMember(Name = "conversation_id", EmitDefaultValue = false)]
        public string ConversationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Feedback {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MuseVersion: ").Append(MuseVersion).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  UnityVersion: ").Append(UnityVersion).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  HeapSessionUrl: ").Append(HeapSessionUrl).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsUnityEmployee: ").Append(IsUnityEmployee).Append("\n");
            sb.Append("  CreationDateUtc: ").Append(CreationDateUtc).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ConversationId: ").Append(ConversationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
