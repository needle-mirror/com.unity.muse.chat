/*
 * Muse API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.6
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Unity.Muse.Chat.Client.OpenAPIDateConverter;

namespace Unity.Muse.Chat.Model
{
    /// <summary>
    /// Chat request, to chat with Muse Chat.
    /// </summary>
    [DataContract(Name = "assistant__models__muse__requests__ChatRequest")]
    internal partial class AssistantModelsMuseRequestsChatRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantModelsMuseRequestsChatRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssistantModelsMuseRequestsChatRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantModelsMuseRequestsChatRequest" /> class.
        /// </summary>
        /// <param name="prompt">User message to Muse Chat. (required)</param>
        /// <param name="conversationId">Uniform conversation ID.</param>
        /// <param name="streamResponse">Whether to stream Muse Chat response. (required)</param>
        /// <param name="organizationId">The ID of the Unity organization. (required)</param>
        /// <param name="unityVersions">List of Unity Editor versions in scope.</param>
        /// <param name="dependencyInformation">Mapping of package dependencies and versions used in user&#39;s project.</param>
        /// <param name="projectSummary">Project summary attributes to help add context to planning system.</param>
        /// <param name="mediationSystemPrompt">Mediation system prompt for Muse Chat.</param>
        /// <param name="skipPlanning">Whether to skip planning system or not.</param>
        /// <param name="tags">List of tags associated with chat request</param>
        /// <param name="planningParams">Planning model parameters for Muse Chat.</param>
        /// <param name="mediationParams">Mediation model parameters for Muse Chat.</param>
        /// <param name="seed">Seed for Muse Chat.</param>
        /// <param name="context">Additional Context for Muse Chat.</param>
        public AssistantModelsMuseRequestsChatRequest(string prompt = default(string), string conversationId = default(string), bool streamResponse = default(bool), string organizationId = default(string), List<string> unityVersions = default(List<string>), Dictionary<string, string> dependencyInformation = default(Dictionary<string, string>), Dictionary<string, string> projectSummary = default(Dictionary<string, string>), string mediationSystemPrompt = default(string), bool skipPlanning = false, List<string> tags = default(List<string>), AssistantModelsMuseRequestsModelParameters planningParams = default(AssistantModelsMuseRequestsModelParameters), AssistantModelsMuseRequestsModelParameters mediationParams = default(AssistantModelsMuseRequestsModelParameters), int seed = default(int), string context = default(string))
        {
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for AssistantModelsMuseRequestsChatRequest and cannot be null");
            }
            this.Prompt = prompt;
            this.StreamResponse = streamResponse;
            // to ensure "organizationId" is required (not null)
            if (organizationId == null)
            {
                throw new ArgumentNullException("organizationId is a required property for AssistantModelsMuseRequestsChatRequest and cannot be null");
            }
            this.OrganizationId = organizationId;
            this.ConversationId = conversationId;
            this.UnityVersions = unityVersions;
            this.DependencyInformation = dependencyInformation;
            this.ProjectSummary = projectSummary;
            // use default value if no "mediationSystemPrompt" provided
            this.MediationSystemPrompt = mediationSystemPrompt;
            this.SkipPlanning = skipPlanning;
            this.Tags = tags;
            this.PlanningParams = planningParams;
            this.MediationParams = mediationParams;
            this.Seed = seed;
            this.Context = context;
        }

        /// <summary>
        /// User message to Muse Chat.
        /// </summary>
        /// <value>User message to Muse Chat.</value>
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// Uniform conversation ID.
        /// </summary>
        /// <value>Uniform conversation ID.</value>
        [DataMember(Name = "conversation_id", EmitDefaultValue = false)]
        public string ConversationId { get; set; }

        /// <summary>
        /// Whether to stream Muse Chat response.
        /// </summary>
        /// <value>Whether to stream Muse Chat response.</value>
        [DataMember(Name = "stream_response", IsRequired = true, EmitDefaultValue = true)]
        public bool StreamResponse { get; set; }

        /// <summary>
        /// The ID of the Unity organization.
        /// </summary>
        /// <value>The ID of the Unity organization.</value>
        [DataMember(Name = "organization_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// List of Unity Editor versions in scope.
        /// </summary>
        /// <value>List of Unity Editor versions in scope.</value>
        [DataMember(Name = "unity_versions", EmitDefaultValue = false)]
        public List<string> UnityVersions { get; set; }

        /// <summary>
        /// Mapping of package dependencies and versions used in user&#39;s project.
        /// </summary>
        /// <value>Mapping of package dependencies and versions used in user&#39;s project.</value>
        [DataMember(Name = "dependency_information", EmitDefaultValue = false)]
        public Dictionary<string, string> DependencyInformation { get; set; }

        /// <summary>
        /// Project summary attributes to help add context to planning system.
        /// </summary>
        /// <value>Project summary attributes to help add context to planning system.</value>
        [DataMember(Name = "project_summary", EmitDefaultValue = false)]
        public Dictionary<string, string> ProjectSummary { get; set; }

        /// <summary>
        /// Mediation system prompt for Muse Chat.
        /// </summary>
        /// <value>Mediation system prompt for Muse Chat.</value>
        [DataMember(Name = "mediation_system_prompt", EmitDefaultValue = false)]
        public string MediationSystemPrompt { get; set; }

        /// <summary>
        /// Whether to skip planning system or not.
        /// </summary>
        /// <value>Whether to skip planning system or not.</value>
        [DataMember(Name = "skip_planning", EmitDefaultValue = true)]
        public bool SkipPlanning { get; set; }

        /// <summary>
        /// List of tags associated with chat request
        /// </summary>
        /// <value>List of tags associated with chat request</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Planning model parameters for Muse Chat.
        /// </summary>
        /// <value>Planning model parameters for Muse Chat.</value>
        [DataMember(Name = "planning_params", EmitDefaultValue = false)]
        public AssistantModelsMuseRequestsModelParameters PlanningParams { get; set; }

        /// <summary>
        /// Mediation model parameters for Muse Chat.
        /// </summary>
        /// <value>Mediation model parameters for Muse Chat.</value>
        [DataMember(Name = "mediation_params", EmitDefaultValue = false)]
        public AssistantModelsMuseRequestsModelParameters MediationParams { get; set; }

        /// <summary>
        /// Seed for Muse Chat.
        /// </summary>
        /// <value>Seed for Muse Chat.</value>
        [DataMember(Name = "seed", EmitDefaultValue = false)]
        public int Seed { get; set; }

        /// <summary>
        /// Additional Context for Muse Chat.
        /// </summary>
        /// <value>Additional Context for Muse Chat.</value>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public string Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssistantModelsMuseRequestsChatRequest {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  ConversationId: ").Append(ConversationId).Append("\n");
            sb.Append("  StreamResponse: ").Append(StreamResponse).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  UnityVersions: ").Append(UnityVersions).Append("\n");
            sb.Append("  DependencyInformation: ").Append(DependencyInformation).Append("\n");
            sb.Append("  ProjectSummary: ").Append(ProjectSummary).Append("\n");
            sb.Append("  MediationSystemPrompt: ").Append(MediationSystemPrompt).Append("\n");
            sb.Append("  SkipPlanning: ").Append(SkipPlanning).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  PlanningParams: ").Append(PlanningParams).Append("\n");
            sb.Append("  MediationParams: ").Append(MediationParams).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
