/*
 * Muse API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.6
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Unity.Muse.Chat.Client;
using Unity.Muse.Chat.Model;

namespace Unity.Muse.Chat.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IAssistantApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Chat
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <returns>Object</returns>
        Object ChatAssistantChatPost(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string));

        /// <summary>
        /// Chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ChatAssistantChatPostWithHttpInfo(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string));
        /// <summary>
        /// Topic
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <returns>Object</returns>
        Object TopicAssistantTopicPost(TopicRequest topicRequest);

        /// <summary>
        /// Topic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TopicAssistantTopicPostWithHttpInfo(TopicRequest topicRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IAssistantApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ChatAssistantChatPostAsync(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatAssistantChatPostWithHttpInfoAsync(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Topic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TopicAssistantTopicPostAsync(TopicRequest topicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Topic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TopicAssistantTopicPostWithHttpInfoAsync(TopicRequest topicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IAssistantApi : IAssistantApiSync, IAssistantApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class AssistantApi : IDisposable, IAssistantApi
    {
        private Unity.Muse.Chat.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AssistantApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AssistantApi(string basePath)
        {
            this.Configuration = Unity.Muse.Chat.Client.Configuration.MergeConfigurations(
                Unity.Muse.Chat.Client.GlobalConfiguration.Instance,
                new Unity.Muse.Chat.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Unity.Muse.Chat.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Unity.Muse.Chat.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AssistantApi(Unity.Muse.Chat.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Unity.Muse.Chat.Client.Configuration.MergeConfigurations(
                Unity.Muse.Chat.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Unity.Muse.Chat.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Unity.Muse.Chat.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AssistantApi(Unity.Muse.Chat.Client.ISynchronousClient client, Unity.Muse.Chat.Client.IAsynchronousClient asyncClient, Unity.Muse.Chat.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Unity.Muse.Chat.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Unity.Muse.Chat.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Unity.Muse.Chat.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Unity.Muse.Chat.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Unity.Muse.Chat.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Unity.Muse.Chat.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Chat 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <returns>Object</returns>
        public Object ChatAssistantChatPost(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string))
        {
            Unity.Muse.Chat.Client.ApiResponse<Object> localVarResponse = ChatAssistantChatPostWithHttpInfo(assistantModelsMessagesChatRequest, userId, conversationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chat 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Unity.Muse.Chat.Client.ApiResponse<Object> ChatAssistantChatPostWithHttpInfo(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string))
        {
            // verify the required parameter 'assistantModelsMessagesChatRequest' is set
            if (assistantModelsMessagesChatRequest == null)
                throw new Unity.Muse.Chat.Client.ApiException(400, "Missing required parameter 'assistantModelsMessagesChatRequest' when calling AssistantApi->ChatAssistantChatPost");

            Unity.Muse.Chat.Client.RequestOptions localVarRequestOptions = new Unity.Muse.Chat.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (conversationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "conversation_id", conversationId));
            }
            localVarRequestOptions.Data = assistantModelsMessagesChatRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.HeaderParameters.Add("access_token", this.Configuration.GetApiKeyWithPrefix("access_token"));
            }
            // authentication (APIKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assistant/chat/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatAssistantChatPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Chat 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ChatAssistantChatPostAsync(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ChatAssistantChatPostWithHttpInfoAsync(assistantModelsMessagesChatRequest, userId, conversationId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Unity.Muse.Chat.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Unity.Muse.Chat.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Chat 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantModelsMessagesChatRequest"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="conversationId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Unity.Muse.Chat.Client.ApiResponse<Object>> ChatAssistantChatPostWithHttpInfoAsync(AssistantModelsMessagesChatRequest assistantModelsMessagesChatRequest, string userId = default(string), string conversationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assistantModelsMessagesChatRequest' is set
            if (assistantModelsMessagesChatRequest == null)
                throw new Unity.Muse.Chat.Client.ApiException(400, "Missing required parameter 'assistantModelsMessagesChatRequest' when calling AssistantApi->ChatAssistantChatPost");


            Unity.Muse.Chat.Client.RequestOptions localVarRequestOptions = new Unity.Muse.Chat.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (conversationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "conversation_id", conversationId));
            }
            localVarRequestOptions.Data = assistantModelsMessagesChatRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.HeaderParameters.Add("access_token", this.Configuration.GetApiKeyWithPrefix("access_token"));
            }
            // authentication (APIKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/assistant/chat/", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChatAssistantChatPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Topic 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <returns>Object</returns>
        public Object TopicAssistantTopicPost(TopicRequest topicRequest)
        {
            Unity.Muse.Chat.Client.ApiResponse<Object> localVarResponse = TopicAssistantTopicPostWithHttpInfo(topicRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Topic 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        public Unity.Muse.Chat.Client.ApiResponse<Object> TopicAssistantTopicPostWithHttpInfo(TopicRequest topicRequest)
        {
            // verify the required parameter 'topicRequest' is set
            if (topicRequest == null)
                throw new Unity.Muse.Chat.Client.ApiException(400, "Missing required parameter 'topicRequest' when calling AssistantApi->TopicAssistantTopicPost");

            Unity.Muse.Chat.Client.RequestOptions localVarRequestOptions = new Unity.Muse.Chat.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = topicRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.HeaderParameters.Add("access_token", this.Configuration.GetApiKeyWithPrefix("access_token"));
            }
            // authentication (APIKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/assistant/topic/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopicAssistantTopicPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Topic 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TopicAssistantTopicPostAsync(TopicRequest topicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TopicAssistantTopicPostWithHttpInfoAsync(topicRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Unity.Muse.Chat.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Unity.Muse.Chat.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Topic 
        /// </summary>
        /// <exception cref="Unity.Muse.Chat.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Unity.Muse.Chat.Client.ApiResponse<Object>> TopicAssistantTopicPostWithHttpInfoAsync(TopicRequest topicRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'topicRequest' is set
            if (topicRequest == null)
                throw new Unity.Muse.Chat.Client.ApiException(400, "Missing required parameter 'topicRequest' when calling AssistantApi->TopicAssistantTopicPost");


            Unity.Muse.Chat.Client.RequestOptions localVarRequestOptions = new Unity.Muse.Chat.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Unity.Muse.Chat.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = topicRequest;

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.HeaderParameters.Add("access_token", this.Configuration.GetApiKeyWithPrefix("access_token"));
            }
            // authentication (APIKeyQuery) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Unity.Muse.Chat.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/assistant/topic/", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopicAssistantTopicPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
